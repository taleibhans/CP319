library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity cache_sys is
    Port (
        clk : in STD_LOGIC;
        reset : in STD_LOGIC;
        addr : in STD_LOGIC_VECTOR(31 downto 0);
        data_in : in STD_LOGIC_VECTOR(31 downto 0);
        data_out : out STD_LOGIC_VECTOR(31 downto 0);
        write_enable : in STD_LOGIC
    );
end cache_sys;

architecture Behavioral of cache_sys is
    -- L1 Cache Component Declaration
    component L1_Cache
        Port (
            clk : in STD_LOGIC;
            reset : in STD_LOGIC;
            addr : in STD_LOGIC_VECTOR(31 downto 0);
            data_in : in STD_LOGIC_VECTOR(31 downto 0);
            data_out : out STD_LOGIC_VECTOR(31 downto 0);
            write_enable : in STD_LOGIC;
            cache_miss : out STD_LOGIC
        );
    end component;

    -- L2 Cache Component Declaration
    component L2_Cache
        Port (
            clk : in STD_LOGIC;
            reset : in STD_LOGIC;
            addr : in STD_LOGIC_VECTOR(31 downto 0);
            data_in : in STD_LOGIC_VECTOR(31 downto 0);
            data_out : out STD_LOGIC_VECTOR(31 downto 0);
            write_enable : in STD_LOGIC;
            cache_miss : out STD_LOGIC
        );
    end component;

    -- Instruction Memory (Main Memory) Component Declaration
    component imem
        Port (
            a : in STD_LOGIC_VECTOR(5 downto 0);
            rd : out STD_LOGIC_VECTOR(31 downto 0)
        );
    end component;

    -- Signals for Interconnections
    signal l1_data_out, l2_data_out, main_mem_data : STD_LOGIC_VECTOR(31 downto 0);
    signal l1_miss, l2_miss : STD_LOGIC;

begin
    -- L1 Cache Instance
    L1: L1_Cache
        Port Map (
            clk => clk,
            reset => reset,
            addr => addr,
            data_in => data_in,
            data_out => l1_data_out,
            write_enable => write_enable,
            cache_miss => l1_miss
        );

    -- L2 Cache Instance
    L2: L2_Cache
        Port Map (
            clk => clk,
            reset => reset,
            addr => addr,
            data_in => l1_data_out, -- L1 passes data to L2 on miss
            data_out => l2_data_out,
            write_enable => write_enable,
            cache_miss => l2_miss
        );

    -- Main Memory (imem) Instance
    IMEM: imem
        Port Map (
            a => addr(5 downto 0), -- Use lower bits for memory addressing
            rd => main_mem_data
        );

    -- Cache Control Logic
    process (clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                data_out <= (others => '0');
            else
                if l1_miss = '1' then
                    if l2_miss = '1' then
                        data_out <= main_mem_data; -- Miss in both L1 and L2, fetch from memory
                    else
                        data_out <= l2_data_out; -- L2 hit, fetch from L2
                    end if;
                else
                    data_out <= l1_data_out; -- L1 hit, fetch from L1
                end if;
            end if;
        end if;
    end process;
end Behavioral;
